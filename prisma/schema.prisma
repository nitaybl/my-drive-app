// File: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// Enum for User Roles
enum UserRole {
  USER
  ADMIN
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  password_hash       String?
  emailVerified       DateTime? @map("emailVerified")
  image               String?
  storageQuota        BigInt?   @default(214748364800) @map("storageQuota")
  storageUsed         BigInt?   @default(0) @map("storageUsed")
  googleDriveFolderId String?   @map("googleDriveFolderId")
  role                UserRole  @default(USER) // <-- ADD THIS LINE FOR ADMIN ROLE

  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("userId")
  type              String
  provider          String
  providerAccountId String  @map("providerAccountId")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("sessionToken")
  userId       String   @map("userId")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// NEW MODEL for Invitation Codes
model Invitation {
  id        String   @id @default(cuid())
  code      String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  usedBy    String? // Will store the email of the user who redeemed it
  createdAt DateTime @default(now())
}
